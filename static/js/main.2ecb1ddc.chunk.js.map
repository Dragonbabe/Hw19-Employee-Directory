{"version":3,"sources":["components/Header.js","components/Form.js","utils/API.js","components/ResultTable.js","components/SearchResultContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Form","props","htmlFor","value","firstName","name","onChange","handleInputChange","type","placeholder","forhtml","handleSelectChange","id","axios","get","ResultTable","results","map","result","index","key","src","picture","large","alt","first","last","email","moment","dob","date","format","SearchResultContainer","event","target","filteredResults","state","filter","toLowerCase","includes","setState","sortedResults","sort","a","b","slice","this","searchEmployees","API","then","res","data","catch","err","console","log","search","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2ecb1ddc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './header.css';\r\n\r\nclass Header extends React.Component {\r\n    \r\n  render()  {\r\n      return (\r\n      <h1 className=\"jumbotron\">Welcome to Your Employee Directory!</h1>\r\n      )};\r\n}\r\nexport default Header;","import React from 'react';\r\nimport './form.css';\r\n\r\nfunction Form(props) {\r\n    \r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor=\"firstName\">Type in some letters to see employee's first names that include those letters</label>\r\n            <input className=\"form-control\"\r\n                value={props.firstName}\r\n                name=\"firstName\"\r\n                onChange={props.handleInputChange}\r\n                type=\"text\"\r\n                placeholder=\"First Name\"\r\n            />\r\n            <label forhtml=\"sort\">Sort Employees By Ascending or Descending Birth Month</label>\r\n            <select \r\n            onChange={props.handleSelectChange}\r\n            id=\"sort\">\r\n                <option value=\"ascending\">Ascending</option>\r\n                <option value=\"descending\">Descending</option>\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\nexport default Form;","import axios from  \"axios\";\r\n\r\nexport default {\r\n    search: function() {\r\n        return axios.get(\"https://randomuser.me/api/?results=50\")\r\n    }\r\n\r\n}","import React from 'react';\r\nimport moment from 'moment';\r\n\r\n\r\n\r\nfunction ResultTable(props) {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <table className=\"table\">\r\n                <thead>\r\n                <tr>\r\n                    <th>Image</th>\r\n                    <th>Name</th>\r\n                    <th>Email</th>\r\n                    <th>DOB</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {props.results.map((result, index) => (\r\n                    <tr key={index}>\r\n                        <td><img src={result.picture.large} alt=\"person head shot\"/></td>\r\n                        <td>{result.name.first} {result.name.last}</td>\r\n                        <td>{result.email}</td>\r\n                        <td>{moment(result.dob.date).format('MM-DD-YYYY')}</td>\r\n                    </tr>\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResultTable;","import React from 'react';\r\nimport Form from './Form';\r\nimport API from '../utils/API';\r\nimport ResultTable from './ResultTable';\r\n\r\nclass SearchResultContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            firstName: ``,\r\n            results: [],\r\n            filteredResults: []\r\n        };\r\n    }\r\n\r\n    //When this component mounts search the API for employees\r\n    componentDidMount() {\r\n        this.searchEmployees();\r\n    }\r\n\r\n    searchEmployees() {\r\n        API.search()\r\n            .then(res => {\r\n                this.setState({ results: res.data.results, filteredResults: res.data.results })\r\n            })\r\n            .catch(err => console.log(err));\r\n    };\r\n    handleInputChange = event => {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n        const filteredResults = this.state.results.filter(result => {\r\n            return result.name.first.toLowerCase().includes(value.toLowerCase())\r\n        })\r\n        this.setState({\r\n            [name]: value,\r\n            filteredResults\r\n        });\r\n    };\r\n    handleSelectChange = (event) => {\r\n        const value = event.target.value;\r\n        let sortedResults = [];\r\n\r\n        if (value === 'ascending') {\r\n            sortedResults = [...this.state.filteredResults].sort((a, b) => a.dob.date.slice(5,7) - b.dob.date.slice(5,7))\r\n            \r\n        } else {\r\n            sortedResults = [...this.state.filteredResults].sort((a, b) => b.dob.date.slice(5,7) - a.dob.date.slice(5,7))\r\n        }\r\n        this.setState({\r\n            filteredResults: sortedResults\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form\r\n                    firstName={this.state.firstName}\r\n                    handleSelectChange={this.handleSelectChange}\r\n                    handleInputChange={this.handleInputChange}\r\n                />\r\n                <ResultTable results={this.state.filteredResults} search={this.state.search} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default SearchResultContainer;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport SearchResultContainer from './components/SearchResultContainer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Header/>\n    <SearchResultContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}